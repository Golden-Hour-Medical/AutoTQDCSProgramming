name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        # Install project dependencies if requirements files exist
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # Install optional dependencies for better code analysis
        pip install requests tqdm psutil cryptography
        
    - name: Code formatting check (Black)
      run: |
        black --check --diff --color .
        
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff --color .
        
    - name: Linting (flake8)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking (mypy)
      run: |
        mypy --install-types --non-interactive --ignore-missing-imports .
      continue-on-error: true  # Type checking failures won't fail the workflow
      
    - name: Security scan (bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
      continue-on-error: true
      
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
        
    - name: Dependency security check (safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true
      
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-dependency-report
        path: safety-report.json

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install requests tqdm psutil cryptography
        
    - name: Run tests with coverage
      run: |
        # Create a simple test if none exist
        if [ ! -d "tests" ] && [ ! -f "test_*.py" ]; then
          echo "No tests found, creating basic import test"
          echo "def test_import():
              try:
                  import autotq_setup
                  import autotq_client
                  assert True
              except ImportError as e:
                  print(f'Import failed: {e}')
                  assert False, f'Failed to import modules: {e}'" > test_basic.py
        fi
        
        # Run tests if any exist
        if [ -d "tests" ] || ls test_*.py 1> /dev/null 2>&1; then
          pytest --cov=. --cov-report=xml --cov-report=html
        else
          echo "No tests to run"
        fi
      continue-on-error: true
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests tqdm psutil cryptography
        
    - name: Syntax check
      run: |
        python -m py_compile autotq_setup.py
        python -c "import autotq_setup; print('‚úÖ autotq_setup.py imports successfully')"
        
    - name: Basic functionality test
      run: |
        python autotq_setup.py --help
        
  documentation:
    runs-on: ubuntu-latest
    name: Documentation Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for documentation files
      run: |
        echo "üìã Checking for documentation files..."
        
        # Check for README
        if [ -f "README.md" ] || [ -f "README.rst" ] || [ -f "README.txt" ]; then
          echo "‚úÖ README file found"
        else
          echo "‚ö†Ô∏è No README file found - consider adding one"
        fi
        
        # Check for LICENSE
        if [ -f "LICENSE" ] || [ -f "LICENSE.txt" ] || [ -f "LICENSE.md" ]; then
          echo "‚úÖ LICENSE file found"
        else
          echo "‚ö†Ô∏è No LICENSE file found - consider adding one"
        fi
        
        # Check for requirements.txt
        if [ -f "requirements.txt" ]; then
          echo "‚úÖ requirements.txt found"
          echo "üì¶ Dependencies:"
          cat requirements.txt
        else
          echo "‚ö†Ô∏è No requirements.txt found - consider adding one"
        fi
        
        # Check docstrings in Python files
        echo "üìñ Checking docstrings..."
        python -c "
import ast
import sys

def check_docstrings(filename):
    with open(filename, 'r', encoding='utf-8') as f:
        tree = ast.parse(f.read())
    
    functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
    classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
    
    total = len(functions) + len(classes)
    documented = 0
    
    for node in functions + classes:
        if ast.get_docstring(node):
            documented += 1
    
    if total > 0:
        coverage = (documented / total) * 100
        print(f'{filename}: {documented}/{total} items documented ({coverage:.1f}%)')
        return coverage
    return 100

files = ['autotq_setup.py']
try:
    files.append('autotq_client.py')
except:
    pass

total_coverage = 0
for file in files:
    try:
        coverage = check_docstrings(file)
        total_coverage += coverage
    except Exception as e:
        print(f'Could not check {file}: {e}')

if files:
    avg_coverage = total_coverage / len(files)
    print(f'Average docstring coverage: {avg_coverage:.1f}%')
"

  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install semgrep pip-audit
        
    - name: Run semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        # Create a temporary requirements file for audit
        echo "requests>=2.25.0" > temp-requirements.txt
        echo "urllib3>=1.26.0" >> temp-requirements.txt
        echo "tqdm>=4.50.0" >> temp-requirements.txt
        echo "psutil>=5.8.0" >> temp-requirements.txt
        echo "cryptography>=3.4.0" >> temp-requirements.txt
        
        pip-audit -r temp-requirements.txt --format=json --output=pip-audit-report.json || true
        pip-audit -r temp-requirements.txt
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          semgrep-report.json
          pip-audit-report.json

  build-info:
    runs-on: ubuntu-latest
    name: Build Information
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate build info
      run: |
        echo "üèóÔ∏è Build Information"
        echo "===================="
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Event: ${{ github.event_name }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Job: ${{ github.job }}"
        echo ""
        echo "üìä Repository Stats"
        echo "==================="
        echo "Python files:"
        find . -name "*.py" -type f | wc -l
        echo "Total lines of Python code:"
        find . -name "*.py" -type f -exec wc -l {} + | tail -1
        echo ""
        echo "üìÅ Project Structure"
        echo "===================="
        tree -a -I '.git|__pycache__|*.pyc' . || ls -la 